use game

Fish :: blob {
    value: int
    pos: [float]
    speed: [float]
    height: int
    layer: int

    update: fn float -> void
    draw: fn -> void

    hit: fn -> void
    world_pos: fn -> [float]
}

fish_list :: fn -> [Fish] {
    ret [fish_new([-100.0, -100.0], 0)]
}

fish_new :: fn pos: [float], layer: int -> Fish {

    PI := 3.1415
    FISH_INIT_SPEED :: 2.5
    FISH_ANIM_TIME :: 0.3

    angle := l_random_range! PI * 2.0 / 5.0, PI * 3.0 / 5.0

    fish :: Fish! {
        value: 10,
        pos: pos,
        speed: [FISH_INIT_SPEED * cos(angle), FISH_INIT_SPEED * sin(angle)],
        height: 0,
        layer: layer,

        update: fn delta: float {},
        draw: fn {},
        hit: fn {},
        world_pos: fn -> [float] { ret [0.0] },
    }

    fish.update = fn delta: float {
        fish.pos[0] += fish.speed[0] * delta
        fish.pos[1] += fish.speed[1] * delta

        fish.speed[1] += -3.0 * delta
    }

    fish.draw = fn {
        sprite := game.fish_frame(0)

        time := rem! l_time(), FISH_ANIM_TIME
        if FISH_ANIM_TIME / 3.0 < time && time < FISH_ANIM_TIME * 2.0 / 3.0 {
            sprite = game.fish_frame(1)
        } else if FISH_ANIM_TIME * 2.0 / 3.0 <= time {
            sprite = game.fish_frame(2)
        }

        pos := fish.world_pos!

        distance := abs! pos[2]
        scale := 0.5 / distance
        x_pos := pos[0] / distance
        y_pos := pos[1] / distance
        w := scale
        h := scale * 123.0 / 245.0

        l_gfx_sprite! sprite, (0, 0), x_pos, y_pos, w, h
    }

    fish.hit = fn {
        fish.pos[1] = -20.0
        // TODO(ed): Do some particles here!
    }

    fish.world_pos = fn -> [float] {
        ret [
            fish.pos[0],
            fish.pos[1],
            1.5 + as_float(fish.layer) * 2.0,
        ]
    }

    ret fish
}

fish_filter :: fn fishes: [Fish] -> [Fish] {
    valid_i := -1
    for i := 0, i < len(fishes), i += 1 {
        if fishes[i].pos[1] >= -20.0 {
            valid_i = i
            break
        }
    }

    if valid_i == -1 {
        ret [fish_new([-100.0, -100.0], 0)]
    }

    new_fishes := [fishes[valid_i]]
    for i := valid_i + 1, i < len(fishes), i += 1 {
        if fishes[i].pos[1] > -20.0 {
            push! new_fishes, fishes[i]
        }
    }
    ret new_fishes
}

