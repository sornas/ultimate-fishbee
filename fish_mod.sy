use game

layer_to_z :: fn layer: int -> float {
    ret 2.0 + as_float(layer) * 3.0
}

Fish :: blob {
    value: int
    pos: [float]
    vel: [float]
    height: int
    layer: int

    kind: int

    update: fn float -> void
    draw: fn -> void

    hit: fn -> void
    world_pos: fn -> [float]
}

fish_list :: fn -> [Fish] {
    ret [fish_new([-100.0, -100.0], 0)]
}

fish_new :: fn pos: [float], layer: int -> Fish {

    PI := 3.1415
    FISH_INIT_SPEED :: 5.0
    FISH_ANIM_TIME :: 0.3

    angle := l_random_range! PI * 2.6 / 5.0, PI * 3.0 / 5.0

    fish: !Fish = nil
    fish = Fish {
        value: 10 * (1 + layer),
        pos: pos,
        vel: [FISH_INIT_SPEED * cos(angle), FISH_INIT_SPEED * sin(angle)],
        height: 0,
        layer: layer,

        kind: l_random_range(0, 2),

        update: fn delta: float {
            fish.pos[0] += fish.vel[0] * delta
            fish.pos[1] += fish.vel[1] * delta

            fish.vel[1] += -3.0 * delta
        },

        draw: fn {
            bundle := game.fish_frame(fish.kind, 0)
            sprite : !(str, int) = bundle[0]
            aspect : !float = bundle[1]

            time := rem! l_time(), FISH_ANIM_TIME
            if FISH_ANIM_TIME / 3.0 < time && time < FISH_ANIM_TIME * 2.0 / 3.0 {
                q : !(str, int) = game.fish_frame(fish.kind, 1)[0]
                sprite = q
            } else if FISH_ANIM_TIME * 2.0 / 3.0 <= time {
                q : !(str, int) = game.fish_frame(fish.kind, 2)[0]
                sprite = q
            }

            pos := fish.world_pos!

            distance := abs! pos[2]
            scale := 0.5 / distance
            x_pos := pos[0] / distance
            y_pos := pos[1] / distance
            w := scale
            h := scale * aspect

            vx := fish.vel[0]
            vy := fish.vel[1]
            angle := atan2! vy, -vx

            l_gfx_sprite! sprite, (0, 0), x_pos, y_pos, w, h, angle
        },

        hit: fn {
            fish.pos[1] = -20.0
        },

        world_pos: fn -> [float] {
            ret [
                fish.pos[0],
                fish.pos[1] + as_float(fish.layer) * 1.0,
                layer_to_z(fish.layer),
            ]
        }
    }

    ret fish
}

fish_filter :: fn fishes: [Fish] -> [Fish] {
    valid_i := -1
    broken := false
    i := 0
    loop !broken && i < len(fishes) {
        if fishes[i].pos[1] >= -5.0 {
            valid_i = i
            broken = true
        }
        i += 1
    }

    if valid_i == -1 {
        ret [fish_new([-100.0, -100.0], 0)]
    }

    new_fishes := [fishes[valid_i]]
    i := valid_i + 1
    loop i < len(fishes) {
        if fishes[i].pos[1] > -20.0 {
            push! new_fishes, fishes[i]
        }
        i += 1
    }
    ret new_fishes
}

