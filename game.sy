use fish_mod
use font_mod
use frisbee_mod
use store_mod
use curtain_mod
use particles_mod

init_store_ := fn -> void {}
can_buy_anything := fn -> bool { ret true }

font_sprite := l_load_image("src/res/font.png", (11, 11))
font :: fn -> (str, int) {
    ret font_sprite
}

// FONT_DOLLAR    := 0
// FONT_PLUS      := 1
// FONT_MINUS     := 2
// FONT_QUESTION  := 3

fish_dims := [
    (91, 236),
    (200, 300),
    (105, 241),
]

water_particles := [
    particles_mod.water_particles(),
    particles_mod.water_particles(),
    particles_mod.water_particles(),
]

coin_sprite_ := l_load_image("res/gold.png", (65, 45))
coin_sprite :: fn -> (str, int) {
    ret coin_sprite_
}

coin_particles := [
    particles_mod.coin_particles(),
    particles_mod.coin_particles(),
    particles_mod.coin_particles(),
]

last_wave := 0.0
sounds := [
    l_load_audio("res/Ultimate_Fishbee_Music.wav"),
    l_load_audio("res/fishbeeSwosh.wav"),
    l_load_audio("res/klirr.wav"),
    l_load_audio("res/rida.wav"),
    l_load_audio("res/waves.wav"),
]

fish_frames := [
    l_load_image("res/fish1_1.png", (91, 236)),
    l_load_image("res/fish1_2.png", (91, 236)),
    l_load_image("res/fish1_3.png", (91, 236)),

    l_load_image("res/fish2_1.png", (200, 300)),
    l_load_image("res/fish2_2.png", (200, 300)),
    l_load_image("res/fish2_3.png", (200, 300)),

    l_load_image("res/fish3_1.png", (105, 241)),
    l_load_image("res/fish3_2.png", (105, 241)),
    l_load_image("res/fish3_3.png", (105, 241)),
]

fish_frame :: fn index: int, frame: int -> ((str, int), float) {
    w : !int = fish_dims[index][0]
    h : !int = fish_dims[index][1]
    ret (fish_frames[index * 3 + frame], as_float(h) / as_float(w))
}

fishes := fish_mod.fish_list!
frisbee_stack := frisbee_mod.stack!
frisbee := frisbee_mod.new! 1.0, 1.0, 1.0, 1.0
out_of_frisbees := false

total_money := 0
made_money := 0
count_down := 0.0

GAME_STATE_PLAYING := 0
GAME_STATE_STORE := 1
GAME_STATE_MENU := 2

game_state := GAME_STATE_MENU

set_game_state :: fn state: int {
    game_state = state
    l_audio_play(sounds[3], false, 1.0, 2.0)
}

frisbee_accents := [
    [
        l_load_image("res/frisbee_spikes1.png", (245, 123)),
        l_load_image("res/frisbee_spikes2.png", (245, 123)),
        l_load_image("res/frisbee_spikes3.png", (245, 123)),
    ],
    [
        l_load_image("res/frisbee_dots1.png", (245, 123)),
        l_load_image("res/frisbee_dots2.png", (245, 123)),
        l_load_image("res/frisbee_dots3.png", (245, 123)),
    ],
    [
        l_load_image("res/frisbee_wave1.png", (245, 123)),
        l_load_image("res/frisbee_wave2.png", (245, 123)),
        l_load_image("res/frisbee_wave3.png", (245, 123)),
    ],
]

_frisbee_base :: l_load_image("res/frisbee_base.png", (245, 123))
_frisbee_shadow :: l_load_image("res/frisbee_shadow.png", (245, 123))

frisbee_base :: fn -> (str, int) {
    ret _frisbee_base
}

frisbee_shadow :: fn -> (str, int) {
    ret _frisbee_shadow
}

frisbee_accent :: fn type: int, index: int -> (str, int) {
    ret frisbee_accents[type][index]
}

_curtain_full :: l_load_image("res/curtain_full.png", (512, 512))
_curtain_edge :: l_load_image("res/curtain_edge.png", (512, 512))

curtain_full :: fn -> (str, int) {
    ret _curtain_full
}

curtain_edge :: fn -> (str, int) {
    ret _curtain_edge
}

curtain_pos := 3.0
curtain_vel := 0.0
_curtain_on_complete := fn {}

get_curtain_pos :: fn -> float {
    ret curtain_pos
}

set_curtain_pos :: fn pos: float {
    curtain_pos = pos
}

get_curtain_vel :: fn -> float {
    ret curtain_vel
}

set_curtain_vel :: fn vel: float {
    curtain_vel = vel
}

curtain_on_complete :: fn {
    _curtain_on_complete()
    if game_state == GAME_STATE_STORE {
        init_store_!
    }
}

start_transition :: fn down: bool, on_complete: fn -> void {
    if down {
        curtain_vel = -3.0
    } else {
        curtain_vel = 2.0
    }
    _curtain_on_complete = on_complete
}

keep_frames := [
    l_load_image("res/keep1.png", (146, 186)),
    l_load_image("res/keep2.png", (146, 186)),
    l_load_image("res/keep3.png", (146, 186)),
]

keep_frame :: fn frame: int -> (str, int) {
    ret keep_frames[frame]
}

start_button :: l_load_image("res/start_button.png", (41, 60))

money := 25

get_money :: fn -> int {
    ret money
}

pay :: fn price: int -> bool {
    if price <= money {
        money -= price
        ret true
    }
    ret false
}

buy_frisbee :: fn weight: float, bounciness: float, reusable: float, accuracy: float -> void {
    push! frisbee_stack, frisbee_mod.new(weight, bounciness, reusable, accuracy)
    out_of_frisbees = false
}

init :: fn {
    l_set_window_icon! "res/logo_small.png"

    pop! frisbee_stack

    buy_frisbee! 1.0, 1.0, 1.0, 1.0
    buy_frisbee! 1.0, 1.0, 1.0, 1.0
    buy_frisbee! 1.0, 1.0, 1.0, 1.0

    l_bind_quit("quit")
    l_bind_key("ESCAPE", "quit")

    l_bind_mouse! "left", "hold"
    l_bind_key! "e", "hold"

    l_bind_key! "s", "store"
}

goto_store :: fn -> void {
    if can_buy_anything() {
        on_complete := fn {
            set_game_state(1)
        }
        start_transition! true, on_complete
    }
}

reset_game :: fn {
    money = 25
    frisbee_stack = frisbee_mod.stack!
    clear! frisbee_stack

    buy_frisbee! 1.0, 1.0, 1.0, 1.0
    buy_frisbee! 1.0, 1.0, 1.0, 1.0

    frisbee = pop! frisbee_stack
}

update_game :: fn delta: float -> void {

    if !can_buy_anything() && out_of_frisbees {
        start_transition! true, fn { set_game_state(2) }
    }

    if (l_random() < 0.01) && (l_time()- last_wave) > 10.0 {
        l_audio_play(sounds[4], false, (0.1, 0.1), (0.5, 0.1))
        last_wave = l_time!
    }

    if !out_of_frisbees {
        if !frisbee.thrown && l_input_released("hold") {
            l_audio_play(sounds[1], false, (0.06, 0.01), (1.0, 0.1))
        }
        frisbee.update! delta
    }


    if l_input_down("store") {
        goto_store!
    }

    i := 0
    for q := 0, i < len(fishes), i += 1 {
        q
        fish := fishes[i]
        fish.update! delta

        if frisbee.thrown {
            fish_pos := fish.world_pos!
            delta := [
                fish_pos[0] - frisbee.pos[0],
                fish_pos[1] - frisbee.pos[1],
                (fish_pos[2] - frisbee.pos[2]) * 0.3,
            ]

            distance := sqrt! delta[0] * delta[0] + delta[1] * delta[1] + delta[2] * delta[2]
            if distance < 0.5 {
                frisbee.vel[0] *= -1.0 * frisbee.bounciness
                particles_mod.coin_at! coin_particles[fish.layer], fish.world_pos()
                l_gfx_particle_spawn! coin_particles[fish.layer], fish.value * 2
                l_audio_play(sounds[2], false, (0.7, 0.1), (1.5, 0.4))
                fish.hit!
                money += fish.value
                total_money += fish.value
                // TODO(ed): Use the total money
                total_money
                add_fish_money_text! fish.value

                fish.hit!
            }
        }
    }
    fishes = fish_mod.fish_filter! fishes

    // Spawn fish and water particles
    if l_random() < 0.03 {
        width := 8.0
        x := l_random() * width - width / 2.0 + 3.0
        y := -3.0
        z := l_random_range(0, 2)
        fish := fish_mod.fish_new([x, y], z)
        particles_mod.water_at! water_particles[z], fish.world_pos(), (cos(1.743 * l_time()) * 0.04) - 0.65
        l_gfx_particle_spawn! water_particles[z], 20
        push! fishes, fish
    }

    if frisbee.out() {
        if frisbee.broken() {
            if len(frisbee_stack) > 0 {
                frisbee = pop! frisbee_stack
                out_of_frisbees = false
            } else {
                out_of_frisbees = true
            }
        } else {
            frisbee.reset!
        }
    }

    l_gfx_particle_update! water_particles[0], delta
    l_gfx_particle_update! water_particles[1], delta
    l_gfx_particle_update! water_particles[2], delta

    l_gfx_particle_update! coin_particles[0], delta
    l_gfx_particle_update! coin_particles[1], delta
    l_gfx_particle_update! coin_particles[2], delta
}

add_fish_money_text :: fn value: int -> void {
    if count_down == 0.0 {
        made_money = 0
    }
    made_money += value
    count_down = 2.0
}

draw_fish_money :: fn {
    delta := l_delta!

    count_down = max(0.0, count_down - delta)
    tint1 := (52.0 / 255.0, 52.0 / 255.0, 52.0 / 255.0, 1.0)
    tint2 := (215.0 / 255.0, 152.0 / 255.0, 11.0 / 255.0, min(0.5, count_down * count_down) * 2.0)
    font_mod.draw_num_tint(-0.9, 0.8, 0.1, -1, money, 0, tint1)
    font_mod.draw_num_tint! -0.9, 0.7, 0.06, 1, made_money, 0, tint2
}

wave_sprite := l_load_image("res/water-wave-bigger.png", (128, 128))

waves :: fn layer: int -> void {
    layer := as_float(layer)
    time := layer * 1.234 + l_time()

    for i := -10, i <= 10, i += 1 {
        scale := 0.9 / (layer + 1.0)
        x := as_float(i) * scale + sin(time * 0.5) * 0.05

        offset := layer / 3.0 - 0.7
        if layer == 2.0 {
            offset -= 0.1
        }

        scale_x := scale
        if layer == 1.0 {
            scale_x *= -1.0
        }

        y := offset + cos(time * 1.2) * 0.02
        l_gfx_sprite! wave_sprite, (0, 0), x, y, scale_x, scale
    }
}


boat_sprite := l_load_image("res/boat.png", (512, 512))
water_background := l_load_image("res/water-no-detail.png", (128, 128))
sky_background :: l_load_image("res/background.png", (512, 512))

boat :: fn -> (str, int) {
    ret boat_sprite
}

sky :: fn -> (str, int) {
    ret sky_background
}

shop_button := l_load_image("res/shop_button.png", (35, 56))

draw_game :: fn {
    l_gfx_sprite! sky_background, (0, 0), -0.5, 0.5, 1.0, 1.0
    l_gfx_sprite! sky_background, (0, 0),  0.5, 0.5, 1.0, 1.0
    l_gfx_sprite! sky_background, (0, 0), -0.5,-0.5, 1.0, 1.0
    l_gfx_sprite! sky_background, (0, 0),  0.5,-0.5, 1.0, 1.0
    l_gfx_sprite! water_background, (0, 0), 0.0, -1.1, 2.0, 2.0

    if fish_mod.layer_to_z(2) <= frisbee.pos[2] && !out_of_frisbees {
        frisbee.draw!
    }
    for layer := 2, layer >= 0, layer -= 1 {
        l_gfx_particle_render! coin_particles[layer]
        l_gfx_particle_render! water_particles[layer]
        waves(layer)
        for i := 0, i < len(fishes), i += 1 {
            if fishes[i].layer == layer {
                fishes[i].draw!
            }
        }
        if fish_mod.layer_to_z(layer) > frisbee.pos[2] && fish_mod.layer_to_z(layer-1) <= frisbee.pos[2] && !out_of_frisbees {
            frisbee.draw!
        }
        l_gfx_particle_render! water_particles[layer]
    }

    offset_x := sin(2.6 * l_time()) * 0.04
    offset_y := cos(1.743 * l_time()) * 0.04
    for i := -10, i <= 10, i += 1 {
        scale := 2.0
        l_gfx_sprite! boat_sprite, (0, 0), as_float(i) * scale + offset_x, -1.5 + offset_y, scale, scale
    }

    stack_x := -0.65 + offset_x
    stack_y := -0.8 + offset_y
    for i := 0, i < len(frisbee_stack), i += 1 {
        y := stack_y + 0.1 * as_float(i)
        f := frisbee_stack[i]
        f.draw_stacked! stack_x, y, 1.0
    }

    draw_fish_money!

    if can_buy_anything() {
        scale := 0.3
        mouse := store_mod.norm_mouse_pos()
        if mouse[0] > 0.70 && mouse[1] > 0.70 {
            scale = 0.35
            if l_input_released("hold") {
                goto_store!
            }
        }
        l_gfx_sprite! shop_button, (0, 0), 0.80, 0.93, scale, scale * (56.0 / 35.0), sin(l_time()) * 0.1
    }
}

party_system_init :: fn -> (str, int) {
    PI :: 3.1415

    ps := l_gfx_particle_new!
    l_gfx_particle_lifetime! ps, (30.0, 30.0)

    l_gfx_particle_x! ps, (-0.2, 0.2)
    l_gfx_particle_y! ps, (-2.0, -2.0)

    l_gfx_particle_start_sx! ps, (0.015, 0.10), "Square"
    l_gfx_particle_start_sy! ps, (0.015, 0.10), "Square"
    l_gfx_particle_end_sx! ps, (0.015, 0.015)
    l_gfx_particle_end_sy! ps, (0.015, 0.015)

    l_gfx_particle_vel_angle! ps, (PI/2.0 - 1.0, PI/2.0 + 1.0)
    l_gfx_particle_vel_magnitude! ps, (3.0, 7.0), "Square"
    l_gfx_particle_acc_angle! ps, (-PI/2.0, -PI/2.0)
    l_gfx_particle_acc_magnitude! ps, (1.0, 1.0), "Square"

    l_gfx_particle_start_red! ps, (0.2, 1.0)
    l_gfx_particle_start_green! ps, (0.2, 1.0)
    l_gfx_particle_start_blue! ps, (0.2, 1.0)

    l_gfx_particle_end_red! ps, (0.2, 1.0)
    l_gfx_particle_end_green! ps, (0.2, 1.0)
    l_gfx_particle_end_blue! ps, (0.2, 1.0)

    l_gfx_particle_start_alpha! ps, (1.0, 1.0)
    l_gfx_particle_end_alpha! ps, (0.0, 0.0)

    party := l_load_image! "res/party.png", (16, 16)
    l_gfx_particle_add_sprite! ps, party, (0, 0)
    l_gfx_particle_add_sprite! ps, party, (1, 0)
    l_gfx_particle_add_sprite! ps, party, (2, 0)
    l_gfx_particle_add_sprite! ps, party, (3, 0)

    ret ps
}

party_system := party_system_init()

start :: fn {
    init!

    fs := store_mod.store_init!

    init_store : !fn -> void = fs[0]
    can_buy_anything = fs[1]
    draw_store : !fn -> void = fs[2]


    l_audio_play(sounds[0], true, 0.5, 1.0)

    init_store!
    init_store_ = init_store

    l_gfx_particle_spawn! party_system, 8000

    for _ in inf(0) {
        _
        if l_input_down("quit") {
            break
        }

        l_update!


        if game_state == GAME_STATE_PLAYING {
            update_game! l_delta!
            draw_game!
        } else if game_state == GAME_STATE_STORE {
            draw_store!
        }


        curtain_mod.curtain_update! l_delta!
        curtain_mod.curtain_draw!


        if game_state == GAME_STATE_MENU {
            set_curtain_pos(-0.2)
            scale := sin(l_time() * 1.212) * 0.01
            dx := sin(l_time() * 1.777) * 0.02
            dy := cos(l_time() * 2.999) * 0.003
            l_gfx_sprite! start_button, (0, 0), scale + dx, scale + dy, 0.8 * 41.0 / 60.0, 0.8, sin(l_time()) * 0.1
            if l_input_released("hold") {
                game_state = GAME_STATE_PLAYING
                reset_game!
                start_transition! false, fn {}
            }
        }
        
        l_gfx_particle_update! party_system, l_delta!
        l_gfx_particle_render! party_system

        l_render!
    }
}
