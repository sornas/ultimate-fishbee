use fish_mod
use frisbee_mod

fish_frames := [
    l_load_image("src/res/frisbee_spikes1.png", (245, 123)),
    l_load_image("src/res/frisbee_spikes2.png", (245, 123)),
    l_load_image("src/res/frisbee_spikes3.png", (245, 123)),
]

fish_frame :: fn index: int -> (str, int) {
    ret fish_frames[index]
}

frisbee_accents := [
    [
        l_load_image("src/res/frisbee_spikes1.png", (245, 123)),
        l_load_image("src/res/frisbee_spikes2.png", (245, 123)),
        l_load_image("src/res/frisbee_spikes3.png", (245, 123)),
    ],
    [
        l_load_image("src/res/frisbee_dots1.png", (245, 123)),
        l_load_image("src/res/frisbee_dots2.png", (245, 123)),
        l_load_image("src/res/frisbee_dots3.png", (245, 123)),
    ],
    [
        l_load_image("src/res/frisbee_wave1.png", (245, 123)),
        l_load_image("src/res/frisbee_wave2.png", (245, 123)),
        l_load_image("src/res/frisbee_wave3.png", (245, 123)),
    ],
]

_frisbee_base :: l_load_image("src/res/frisbee_base.png", (245, 123))
_frisbee_shadow :: l_load_image("src/res/frisbee_shadow.png", (245, 123))

frisbee_base :: fn -> (str, int) {
    ret _frisbee_base
}

frisbee_shadow :: fn -> (str, int) {
    ret _frisbee_shadow
}

frisbee_accent :: fn type: int, index: int -> (str, int) {
    ret frisbee_accents[type][index]
}

fishes := [fish_mod.fish_new([-100.0, -100.0], 0)]

frisbee := frisbee_mod.new(1.0, 1.0, 1.0, 1.0)

init :: fn {
    l_bind_quit("quit")
    l_bind_key("ESCAPE", "quit")

    l_bind_mouse! "left", "hold"
    l_bind_key! "e", "hold"


    for i := 0, i < 2, i += 1 {
        push! fishes, fish_mod.fish_new([0.0, 0.0], 0)
    }
}

update :: fn delta: float -> void {
    for i := 0, i < len(fishes), i += 1 {
        fishes[i].update! delta
    }
    fishes = fish_mod.fish_filter! fishes
    //print len(fishes)
    //print l_mouse!
    //print l_mouse_rel!

    frisbee.update! delta

    if frisbee.out() {
        frisbee = frisbee_mod.new! 1.0, 1.0, 1.0, 1.0
    }
}

draw :: fn {
    for layer := 0, layer < 3, layer += 1 {
        //if layer == 0 {
        //    l_gfx_rect! (0.0, 0.0), (1.0, 1.0), (0.5, 0.5, 0.5)
        //}
        for i := 0, i < len(fishes), i += 1 {
            if fishes[i].layer == layer {
                fishes[i].draw!
            }
        }
    }

    frisbee.draw!
}

start :: fn {
    print "start!"
    init!

    for _ in inf(0) {
        _
        if l_input_down("quit") {
            break
        }

        l_update!
        update! l_delta!

        draw!
        l_render!
    }
}
